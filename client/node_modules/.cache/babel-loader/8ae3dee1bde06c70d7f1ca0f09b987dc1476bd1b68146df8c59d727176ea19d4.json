{"ast":null,"code":"import decode from \"jwt-decode\";\n\n//AuthService that we instantiate a new version of for every component that imports it.\nclass AuthService {\n  // retrieve data saved in token\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if the user is still logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    // use type coersion to check if token is NOT undefined and the token is NOT expired\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  // check if the token has expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      return false;\n    }\n  }\n\n  // retrieve token from localStorage\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  }\n\n  // get user id\n  getUserId() {\n    return this.getProfile().data._id;\n  }\n\n  // set token to localStorage and reload page to homepage\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n    window.location.assign(\"/\");\n  }\n\n  // clear token from localStorage and force logout with reload\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem(\"id_token\");\n    // this will reload the page and reset the state of the application\n    window.location.assign(\"/\");\n  }\n}\nconst Auth = new AuthService();\nexport default Auth;","map":{"version":3,"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","getUserId","data","_id","login","idToken","setItem","window","location","assign","logout","removeItem","Auth"],"sources":["/Users/neeraj/Desktop/fitness-tracker-MERN-main/client/src/utils/auth.js"],"sourcesContent":["import decode from \"jwt-decode\";\n\n//AuthService that we instantiate a new version of for every component that imports it.\nclass AuthService {\n  // retrieve data saved in token\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if the user is still logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    // use type coersion to check if token is NOT undefined and the token is NOT expired\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  // check if the token has expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      return false;\n    }\n  }\n\n  // retrieve token from localStorage\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  }\n\n  // get user id\n  getUserId() {\n    return this.getProfile().data._id\n\n  }\n\n  // set token to localStorage and reload page to homepage\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n\n    window.location.assign(\"/\");\n  }\n\n  // clear token from localStorage and force logout with reload\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem(\"id_token\");\n    // this will reload the page and reset the state of the application\n    window.location.assign(\"/\");\n  }\n}\n\nconst Auth = new AuthService();\nexport default Auth;\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,YAAY;;AAE/B;AACA,MAAMC,WAAW,CAAC;EAChB;EACAC,UAAU,GAAG;IACX,OAAOF,MAAM,CAAC,IAAI,CAACG,QAAQ,EAAE,CAAC;EAChC;;EAEA;EACAC,QAAQ,GAAG;IACT;IACA,MAAMC,KAAK,GAAG,IAAI,CAACF,QAAQ,EAAE;IAC7B;IACA,OAAO,CAAC,CAACE,KAAK,IAAI,CAAC,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC;EAC/C;;EAEA;EACAC,cAAc,CAACD,KAAK,EAAE;IACpB,IAAI;MACF,MAAME,OAAO,GAAGP,MAAM,CAACK,KAAK,CAAC;MAC7B,IAAIE,OAAO,CAACC,GAAG,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,EAAE;QACnC,OAAO,IAAI;MACb,CAAC,MAAM;QACL,OAAO,KAAK;MACd;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,OAAO,KAAK;IACd;EACF;;EAEA;EACAR,QAAQ,GAAG;IACT;IACA,OAAOS,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACzC;;EAEA;EACAC,SAAS,GAAG;IACV,OAAO,IAAI,CAACZ,UAAU,EAAE,CAACa,IAAI,CAACC,GAAG;EAEnC;;EAEA;EACAC,KAAK,CAACC,OAAO,EAAE;IACb;IACAN,YAAY,CAACO,OAAO,CAAC,UAAU,EAAED,OAAO,CAAC;IAEzCE,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC;EAC7B;;EAEA;EACAC,MAAM,GAAG;IACP;IACAX,YAAY,CAACY,UAAU,CAAC,UAAU,CAAC;IACnC;IACAJ,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC;EAC7B;AACF;AAEA,MAAMG,IAAI,GAAG,IAAIxB,WAAW,EAAE;AAC9B,eAAewB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}